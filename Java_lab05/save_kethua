import java.util.*;

// ========== Person ==========
class Person {
    protected String name;
    protected String address;
    protected String department;

    public Person() {}

    public Person(String name, String address, String department) {
        this.name = name;
        this.address = address;
        this.department = department;
    }

    public String getName() {
        return name;
    }

    public void print() {
        System.out.println("Name: " + name);
        System.out.println("Address: " + address);
        System.out.println("Department: " + department);
    }
}

// ========== Student ==========
class Student extends Person {
    private ClassRoom classRoom;
    private Teacher advisor;

    public Student(String name, String address, String department) {
        super(name, address, department);
    }

    public void setClassRoom(ClassRoom classRoom) {
        this.classRoom = classRoom;
    }

    public void setAdvisor(Teacher advisor) {
        this.advisor = advisor;
    }

    @Override
    public void print() {
        super.print();
        if (classRoom != null)
            System.out.println("Class: " + classRoom.getName());
        if (advisor != null)
            System.out.println("Advisor: " + advisor.getName());
    }
}

// ========== Teacher ==========
class Teacher extends Person {
    private String rank; // TS, ThS, CN

    public Teacher(String name, String address, String department, String rank) {
        super(name, address, department);
        this.rank = rank;
    }

    public String getRank() {
        return rank;
    }

    @Override
    public void print() {
        super.print();
        System.out.println("Rank: " + rank);
    }
}

// ========== ClassRoom ==========
class ClassRoom {
    private String name;
    private List<Student> studentList;
    private Teacher advisor;

    public ClassRoom(String name, Teacher advisor) {
        this.name = name;
        this.advisor = advisor;
        this.studentList = new ArrayList<>();
    }

    public String getName() {
        return name;
    }

    public void addStudent(Student s) {
        studentList.add(s);
        s.setClassRoom(this);
        s.setAdvisor(advisor);
    }

    public void printList() {
        System.out.println("\nClass: " + name);
        System.out.println("Advisor: " + advisor.getName());
        System.out.println("Number of Students: " + studentList.size());
        System.out.println("Student list:");
        for (Student s : studentList) {
            System.out.println("- " + s.getName());
        }
    }
}

// ========== Main ==========
public class Main {
    private static Scanner sc = new Scanner(System.in);

    // Hàm nhập thông tin chung cho Person
    private static String[] inputPersonInfo() {
        System.out.print("Enter name: ");
        String name = sc.nextLine();
        System.out.print("Enter address: ");
        String address = sc.nextLine();
        System.out.print("Enter department: ");
        String department = sc.nextLine();
        return new String[]{name, address, department};
    }

    public static void main(String[] args) {
        List<Teacher> teachers = new ArrayList<>();
        List<ClassRoom> classes = new ArrayList<>();

        while (true) {
            System.out.println("\n===== MENU =====");
            System.out.println("1. Add Teacher");
            System.out.println("2. Add ClassRoom");
            System.out.println("3. Add Student to Class");
            System.out.println("4. Print all Classes");
            System.out.println("0. Exit");
            System.out.print("Choose: ");

            int choice = Integer.parseInt(sc.nextLine());

            switch (choice) {
                case 1: {
                    String[] info = inputPersonInfo();
                    System.out.print("Enter rank (TS/ThS/CN): ");
                    String rank = sc.nextLine();
                    Teacher t = new Teacher(info[0], info[1], info[2], rank);
                    teachers.add(t);
                    System.out.println("Added Teacher successfully!");
                    break;
                }
                case 2: {
                    if (teachers.isEmpty()) {
                        System.out.println("No teacher available! Add teacher first.");
                        break;
                    }
                    System.out.print("Enter class name: ");
                    String className = sc.nextLine();

                    System.out.println("Choose advisor by index:");
                    for (int i = 0; i < teachers.size(); i++) {
                        System.out.println(i + ". " + teachers.get(i).getName());
                    }
                    int idx = Integer.parseInt(sc.nextLine());
                    Teacher advisor = teachers.get(idx);

                    ClassRoom c = new ClassRoom(className, advisor);
                    classes.add(c);
                    System.out.println("Added Class successfully!");
                    break;
                }
                case 3: {
                    if (classes.isEmpty()) {
                        System.out.println("No class available! Add class first.");
                        break;
                    }
                    String[] info = inputPersonInfo();
                    Student s = new Student(info[0], info[1], info[2]);

                    System.out.println("Choose class to add student:");
                    for (int i = 0; i < classes.size(); i++) {
                        System.out.println(i + ". " + classes.get(i).getName());
                    }
                    int idx = Integer.parseInt(sc.nextLine());
                    classes.get(idx).addStudent(s);

                    System.out.println("Added Student successfully!");
                    break;
                }
                case 4: {
                    for (ClassRoom c : classes) {
                        c.printList();
                    }
                    break;
                }
                case 0:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice!");
            }
        }
    }
}
